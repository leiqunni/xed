/************************************************************************/
/*																		*/
/*	行管理						by H.Watanabe							*/
/*	Ver1.00	2009/04/04 13:49:05	作成開始								*/
/*																		*/
/************************************************************************/

#	include	<stdio.h>													/* 標準入出力関数*/
#	include	<string.h>													/* 標準文字列関数*/
#	include	"main.h"													/* メインインクルードファイル*/

/************************************************************************/
/*	行確保サイズの計算													*/
/************************************************************************/

int		linAlcSiz( int siz ){

	int		len=siz+1;													// 最小確保サイズ
	int		i;															// 確保サイズ

	for( i=1; i<len; i<<=1 ){											// ２のＮ乗数ループ
	}
	return( i );														// 確保サイズを持ってリターン
}

/************************************************************************/
/*	文字列から行確保サイズの計算										*/
/************************************************************************/

int		linAlcSizStr( const char *txtadr ){
	return( linAlcSiz( strlen( txtadr ) ) );							// 行確保サイズの計算
}

/************************************************************************/
/*	サイズによる行登録													*/
/************************************************************************/

stLIN	*linAlc( stDB *lindbp, const char *txtadr, int txtsiz ){

	stLIN		*linp;													// 行ポインタ
	int			alcsiz;													// 行確保サイズ
	char		*txtp;													// 新しいテキストポインタ

	alcsiz=linAlcSiz( txtsiz );											// 行確保サイズの計算
	linp=(stLIN*)dbAlc( lindbp, 0, alcsiz, 0 );							// 行登録
	txtp=(char*)dbKEYADR( linp );										// 新しいテキストポインタ
	memcpy( txtp, txtadr, txtsiz );										// テキストコピー
	txtp[txtsiz]=0;														// ０ターミネート
	return( linp );														// 新しい行ポインタをもってリターン
}

/************************************************************************/
/*	文字列による行登録													*/
/************************************************************************/

stLIN	*linAlcStr( stDB *lindbp, const char *txtadr ){
	return( linAlc( lindbp, txtadr, strlen( txtadr ) ) );				// サイズによる行登録
}

/************************************************************************/
/*	スクロール値の計算													*/
/************************************************************************/

static int	linScrVal( int curxx, int pgxx ){

	int		xx;															// カーソルＸ座標

	if( curxx<pgxx || curxx>=pgxx+g_txxd ){								// 範囲外
		xx=curxx-(g_txxd-1);
		if( xx<=0 ){
			pgxx=0;
		}else{
			pgxx=((xx+31)/32)*32;
		}
	}
	return( pgxx );
}

/************************************************************************/
/*	スクロールの正規化													*/
/************************************************************************/

int		linAdjScr(void){

	int		res=0;														// リザルト( 1:要再描画 )
	int		xx;															// ページＸ座標

	xx=linScrVal( CURXX, PGXX );										// スクロール値の計算
	if( PGXX!=xx ){														// カレントと違う
		PGXX=xx;														// カレント更新
		res=1;															// リザルトセット
	}
	return( res );
}

